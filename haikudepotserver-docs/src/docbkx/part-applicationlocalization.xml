<?xml version="1.0" encoding="UTF-8"?>

<!--
Copyright 2015-2017, Andrew Lindesay
Distributed under the terms of the MIT License.
-->

<chapter xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink"
         version="5.0" xml:id="applicationlocalization">

    <title>Application Localization</title>

    <para>
        Application localization refers to the process of adapting the interface of the application to support
        different languages.  Different languages such as English, German or Chinese are referred to as
        &quot;natural languages&quot; in the application in order to differentiate from computer languages such
        as C++, Java or Ruby.  An instance of the application running in a browser has a chosen natural language
        that has either come about through the user explicitly choosing a language or through the user having
        authenticated and the authenticated user's configured natural language being employed.
    </para>

    <section xml:id="applicationlocalization-datetimenumerics">
        <title>Dates, Times and Numerics</title>

        <para>
            In general, presentation of dates, times and numerics is made in a locale-agnostic manner.
        </para>
    </section>

    <section>
        <title>General Messages and Text</title>

        <para>
            The user interface of the application is implemented in the browser using
            <ulink url="http://www.angularjs.org/">AngularJS</ulink>.
            This is a &quot;single page&quot; architecture.  A service &quot;messageSource&quot; is provided that
            provides a key-to-text mapping system.  Example keys are;
        </para>

        <para>
            <itemizedlist>
                <listitem>gen.home.title</listitem>
                <listitem>changePassword.action.title</listitem>
                <listitem>addAuthorizationPkgRule.userNickname.required</listitem>
            </itemizedlist>
        </para>

        <para>
            The rest of the application uses the messageSource service, together with these known keys, to localize
            the text that is used to build the user interface.  A directive, &quot;message&quot; is useful in that
            it is able to render language-specific text based on the current natural language and a key.
        </para>

        <para>
            The mapping from the keys to text is done using java properties files.  These property files are located
            in the source at;
        </para>

        <itemizedlist>
            <listitem><code>haikudepotserver-webapp/src/main/resources/webmessages_*.properties</code></listitem>
            <listitem><code>haikudepotserver-core/src/main/resources/messages_*.properties</code></listitem>
        </itemizedlist>

        <para>
            Variants of the properties file for various natural languages can be found at this location and each file
            is suffixed by the code for the natural language.
        </para>

        <para>
            If a key does not have a value specified for a specific natural language then it will fall back to the
            default of English.
        </para>

    </section>

    <section>
        <title>Formatted HTML / Passive Content</title>

        <para>
            Sometimes it is impractical to take plain-text strings and re-format them into complex layouts.  In this
            case, segments of HTML can be used to insert pre-formatted content that is specific to a given natural
            language.  These segments are located at
            &quot;<code>haikudepotserver-webapp/src/main/webapp/js/app/passivecontent/*.html</code>&quot;
        </para>

        <para>
            This is used, for example, in the &quot;about page&quot;.  These segments should use a containing element
            such as &lt;div&gt; in order to contain the material to be rendered.  Files for different languages
            will be suffixed with the natural language.
        </para>
    </section>

    <section>
        <title>Emails</title>

        <para>
            Emails are rendered from data models using the
            <ulink url="http://freemarker.org/">Freemarker</ulink> library.
            For each email there is a default which is the English natural language and then there may be variants
            for various natural languages.  The Freemarker templates for email generation are located at
            &quot;<code>haikudepotserver-core/src/main/resources/mail/*.ftl</code>&quot;.
        </para>
    </section>

    <section>
        <title>Error Pages</title>

        <para>
            The &quot;error page&quot; is a page that renders a message to indicate that, for some reason, the
            user's usage of the application cannot continue.  The localization of this page is in-code logic because
            this approach yields a low probability that the rendering of the error page will result in further error.
            The text for this page can be found in the file
            &quot;<code>haikudepotserver-webapp/src/main/java/org/haiku/haikudepotserver/support/web/ErrorServlet.java</code>&quot;.
        </para>
    </section>

    <section>
        <title>Unsupported</title>

        <para>
            An &quot;unsupported page&quot; is designed to appear when a browser does not support the technology
            required to drive the user interface of the application.  This unsupported page has localization messages
            directly in the JSP template because any detection of natural language or mechanisms to select a natural
            language may not function.  The text for this page can be found in the file
            &quot;<code>haikudepotserver-webapp/src/main/webapp/WEB-INF/includes/unsupported.jsp</code>&quot;.
        </para>
    </section>

</chapter>
